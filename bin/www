#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('ping-pong:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io')(server);
 // * Listen on provided port, on all network interfaces.

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */
var keyA = [];
var secondTime = 0;
var letsGetThisGoing = false;

if (true)
{
  setInterval(function(){
    io.emit('state request');
  },100);
}

io.on('connect', function(socket) {
  console.log("Connected ",secondTime);
  secondTime ++;
  if(secondTime === 2)
  {
    io.emit('initial response');
  }
  socket.on("determine first", function(key){
    console.log("Made it again to the server/ Key is ",key);
    keyA.push(key);
    if (keyA.length === 2)
    {
      io.emit("send array",keyA);
      console.log("Sending the array back to the clients ", keyA);
      letsGetThisGoing = true;
    }
  });
  var table1Players = 0;
  var firstPlayer,secondPlayer
  socket.on("lobby",function(key,userName,tableN){
    console.log("The key is ",key," The user name is ",userName);
    io.emit("gameOn",userName,key,tableN);
    if (table1Players === 0)
    {
      firstPlayer = key;
    }
    else if (table1Players ===1)
    {
      secondPlayer = key;
      // io.emit("gameOn",userName,key);
    }
    table1Players ++;

  });

  socket.on("send paddles", function(paddleObj,paddleProp,key){
    io.emit("update enemy",paddleObj,paddleProp,key);
  });

 socket.on('reset', function(){
    io.emit('resett');
    secondTime = 0;
    keyA = [];
    letsGetThisGoing = false;
  });

});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
